@model IEnumerable<StudentsManager.Domain.Models.ClassGroup>

@{
    var today = DateTime.Today;
    var startOfWeek = today.AddDays(-(int)today.DayOfWeek + (int)DayOfWeek.Monday);
    var futureWeeks = new List<string>();
    for (var week = 0; week < 52; week++)
    {
        var weekStart = startOfWeek.AddDays(week * 7);
        var weekEnd = weekStart.AddDays(6);
        futureWeeks.Add($"{weekStart:dd.MM.yy} - {weekEnd:dd.MM.yy}");
    }
}

<h2>Class Groups</h2>

<div style="display:flex; justify-content:space-between;">
    <div class="mb-3" style="flex: 0 0 30%; max-width: 30%;">
        <select id="classGroupSelect" class="form-control">
            <option value="">Select a Class Group</option>
            @foreach (var classGroup in Model)
            {
                <option value="@classGroup.ClassGroupId">@classGroup.Name</option>
            }
        </select>
    </div>

    <div class="mb-3" style="flex: 0 0 30%; max-width: 30%;">
        <select id="weekSelect" class="form-control">
            <option value="">Select Week</option>
            @foreach (var week in futureWeeks)
            {
                var weekStartDate = DateTime.ParseExact(week.Substring(0, 8), "dd.MM.yy", null);
                <option value="@weekStartDate.ToString("yyyy-MM-dd")">@week</option>
            }
        </select>
    </div>
</div>

@foreach (var classGroup in Model)
{
    <div id="classGroup-@classGroup.ClassGroupId" style="display: none;">
        <h3>@classGroup.Name</h3>
        <table class="table table-bordered">
            <thead>
            <tr>
                <th>Time</th>
                <th>Monday</th>
                <th>Tuesday</th>
                <th>Wednesday</th>
                <th>Thursday</th>
                <th>Friday</th>
            </tr>
            <style>
                .Math { background-color: yellow; }
                    .IT { background-color: blue; }
                    .PE { background-color: red; }
                    .Science { background-color: green; }
                    .History { background-color: brown; }
                    .English { background-color: purple; }
                    .lesson-slot:hover {
                        background-color: #f0f0f0;
                        cursor: pointer;
                }
            </style>
            </thead>
            <tbody>
            @for (var hour = 8; hour <= 16; hour++)
            {
                <tr>
                    <td>@hour:00 - @(hour + 1):00</td>
                    @{
                        var backgroundColor = "";
                    }
                    @foreach (var day in Enum.GetValues(typeof(DayOfWeek)).Cast<DayOfWeek>().Where(d => d >= DayOfWeek.Monday && d <= DayOfWeek.Friday))
                    {
                        var lessonPlan = classGroup.LessonPlans.FirstOrDefault(p => p.DayOfWeek == day && p.StartHour == hour);
                        var isBooked = lessonPlan != null;
                        if (isBooked)
                        {
                            backgroundColor = lessonPlan.Subject.ToString() switch
                            {
                                "Math" => "yellow",
                                "IT" => "blue",
                                "PE" => "red",
                                "Science" => "green",
                                "History" => "brown",
                                "English" => "purple",
                                _ => ""
                            };
                        }

                        var subjectClass = isBooked ? backgroundColor : "";
                        <td class="lesson-slot"
                            style="background-color: @subjectClass;"
                            data-class-group-id="@classGroup.ClassGroupId"
                            data-day="@((int)day)"
                            data-hour="@hour"
                            data-lesson-plan-id="@lessonPlan?.LessonPlanId"
                            data-date="@lessonPlan?.Date">
                            @if (isBooked)
                            {
                                <div>@lessonPlan.Subject - @lessonPlan.Description</div>
                            }
                        </td>
                    }

                </tr>
            }
            </tbody>
        </table>
        @if (User.IsInRole("Admin"))
        {
            <form action="@Url.Action("Delete", "ClassGroups", new { id = classGroup.ClassGroupId })" method="post" onsubmit="return confirm('Are you sure you want to delete this group?');">
                <button type="submit" class="btn btn-danger">Delete This Group</button>
            </form>
        }
    </div>
}
@if (User.IsInRole("Admin"))
{
    <div class="row">
        <div class="col-md-12 text-right">
            <a href="@Url.Action("Create", "ClassGroups")" class="btn btn-primary mt-3">Create New Group</a>
        </div>
    </div>
}

<script>
document.addEventListener("DOMContentLoaded", function() {
    var weekSelect = document.getElementById('weekSelect');
    var classGroupSelect = document.getElementById('classGroupSelect');
    var allClassGroups = document.querySelectorAll('[id^="classGroup-"]');
    var isAdmin = '@User.IsInRole("Admin")' === 'True';

    function handleSelections() {
        var selectedWeek = weekSelect.value;
        var selectedGroup = classGroupSelect.value;

        if (selectedWeek && selectedGroup) {
            var currentUrl = new URL(window.location.href);
            var urlWeek = currentUrl.searchParams.get('weekStartDate');
            var urlGroup = currentUrl.searchParams.get('classGroupId');

            if (urlWeek !== selectedWeek || urlGroup !== selectedGroup) {
                window.location.href = '?weekStartDate=' + encodeURIComponent(selectedWeek) + '&classGroupId=' + encodeURIComponent(selectedGroup);
            } else {
                allClassGroups.forEach(function(group) {
                    group.style.display = 'none';
                });
                var activeGroup = document.getElementById('classGroup-' + selectedGroup);
                if (activeGroup) {
                    activeGroup.style.display = 'block';
                }
            }
        }
    }

    // Event Listeners
    weekSelect.addEventListener('change', handleSelections);
    classGroupSelect.addEventListener('change', handleSelections);

    // Initialize selections from URL
    var params = new URLSearchParams(window.location.search);
    var weekParam = params.get('weekStartDate');
    var groupParam = params.get('classGroupId');

    if (weekParam && groupParam) {
        weekSelect.value = weekParam;
        classGroupSelect.value = groupParam;
        handleSelections();  // Auto-display the table based on URL parameters
    }

    // Additional functionality for handling lesson slots
    document.querySelectorAll('.lesson-slot').forEach(slot => {
        slot.addEventListener('click', function() {
            var classGroupId = this.getAttribute('data-class-group-id');
            var lessonPlanId = this.getAttribute('data-lesson-plan-id');
            var day = parseInt(this.getAttribute('data-day'));
            var hour = this.getAttribute('data-hour');

            if (!isNaN(day) && weekSelect.value) {
                var weekStartDate = new Date(weekSelect.value);
                if (!isNaN(weekStartDate.getTime())) {
                    var selectedDate = new Date(weekStartDate);
                    selectedDate.setDate(selectedDate.getDate() + (day - 1));
                    var dateString = selectedDate.getFullYear() + '-' + ('0' + (selectedDate.getMonth() + 1)).slice(-2) + '-' + ('0' + selectedDate.getDate()).slice(-2);
                    
                    if (lessonPlanId && isAdmin) {
                        window.location.href = `@Url.Action("Edit", "LessonPlans")?lessonPlanId=${lessonPlanId}`;
                    } else if (!lessonPlanId && classGroupId && day && hour && dateString && isAdmin) {
                        var url = `@Url.Action("Create", "LessonPlans")?classGroupId=${classGroupId}&day=${day}&hour=${hour}&date=${dateString}`;
                        window.location.href = url;
                    } else if (lessonPlanId && classGroupId && day && hour && dateString && isAdmin) {
                        var url = `@Url.Action("Edit", "LessonPlans")?classGroupId=${classGroupId}&day=${day}&hour=${hour}&date=${dateString}`;
                        window.location.href = url;
                    }
                } else {
                    console.error("Invalid week start date:", weekSelect.value);
                }
            }
        });
    });
});
</script>